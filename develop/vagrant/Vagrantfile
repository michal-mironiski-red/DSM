#If not stated otherwise in this file or this component's LICENSE file the
# following copyright and licenses apply:
#
# Copyright 2022 Consult Red
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=begin
################################################################################
Vagrantfile to configure a VirtualBox VM that can be used for LCM development.
################################################################################
=end

# Grab the name of the default interface
$default_network_interface = `ip route | awk '/^default/ {printf "%s", $5; exit 0}'`

Vagrant.configure("2") do |config|

    ##################################################
    #
    # VM Configuration (Ubuntu 22.04)
    #
    config.vm.box = "ubuntu/lunar64"

    config.vm.hostname = "dsm-vagrant-lunar"
    config.vm.define "dsm-vagrant-lunar"

    config.vm.network "public_network", bridge: "#$default_network_interface"

    config.vagrant.plugins = "vagrant-disksize"
    config.vagrant.plugins = "vagrant-vbguest"
    config.disksize.size = '50GB'

    config.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"  # Change this to reduce the amount of RAM assigned to the VM
        vb.cpus = "6"       # Change this to reduce the amount of cores assigned to the VM
        vb.customize ["modifyvm", :id, "--ioapic", "on", "--vram", "100", "--graphicscontroller", "vmsvga", "--audio", "none"]
	vb.customize ["modifyvm", :id, "--usb", "on"]
        vb.customize ["modifyvm", :id, "--usbehci", "on"]
    end

    ##################################################
    #
    # Git & SSH Config
    #
    # Forward SSH keys from host
    config.ssh.forward_agent = true

    # Copy host gitconfig
    config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
    config.vm.provision "file", source: "~/.ssh", destination: "$HOME/.ssh"
    config.vm.provision "file", source: "./patches", destination: "$HOME/patches"
    config.vm.provision "file", source: "./extra_files", destination: "$HOME/extra_files"

    # Configure git/ssh keys
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -Ht rsa github.com >> ~/.ssh/known_hosts
        ssh-keyscan -Ht ecdsa github.com >> ~/.ssh/known_hosts
    SHELL

    # Copy in DSM from host machine
    # uncomment the section below to copy DSM source files from your host
    # config.vm.provision "file", source: "../../src", destination: "$HOME/srcDsm/DSM/src"
    # config.vm.provision "file", source: "../../CMakeLists.txt", destination: "$HOME/srcDsm/DSM/CMakeLists.txt"

	config.vm.provision "shell", inline: <<-SHELL
		apt-get update -y && apt-get upgrade -y
		apt-get install -y figlet
		
		figlet DEPENDENCIES  # ASCII banner
		
		apt-get install -y build-essential cmake make git gcc pkgconf libtool libctemplate-dev libjsoncpp-dev libdbus-1-dev libsystemd-dev libyajl-dev libcap-dev go-md2man autoconf automake libseccomp-dev libboost-dev valgrind libcunit1-dev liblog4c-dev libfreetype6-dev libjpeg-dev xorg-dev python3 python3-pip libarchive-dev libcurl4 libcurl4-gnutls-dev libssl-dev libgpgme11-dev libtool-bin libarchive13 bison flex 
                echo "#######"
                apt-get install -y bison flex cmake
                echo "#######"



                # Dev tools
                apt-get install -y tmux fzf neovim
		#
		# Create build folders, links etc...
		#
		cp /usr/lib/x86_64-linux-gnu/dbus-1.0/include/dbus/dbus-arch-deps.h /usr/include/dbus-1.0/dbus
		mkdir -p /usr/lib/plugins/dobby
		mkdir -p /opt/persistent/rdk
		mkdir -p /var/volatile/rdk/dobby/bundles
		chmod 755 /var/volatile/rdk/dobby/bundles
	SHELL


	config.vm.provision "shell", inline: <<-SHELL
		figlet USP DEPENDENCIES  # ASCII banner
		
		apt-get install -y libssl-dev libcurl4-openssl-dev libsqlite3-dev libz-dev autoconf automake libtool  pkg-config net-tools
		apt-add-repository -y ppa:mosquitto-dev/mosquitto-ppa
		apt-get update
		apt-get install -y libmosquitto-dev libwebsockets-dev
	SHELL

	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet CRUN  # ASCII banner
                if [ ! -d ~/crun ]; then
                  git clone -b 1.6 --depth 1 https://github.com/containers/crun.git ~/crun
                fi
                cd ~/crun
                git pull

		
		./autogen.sh
		./configure --enable-shared
		sudo make install -j$(nproc)
		sudo ln -f -s /usr/local/bin/crun /usr/bin/crun
		
		sudo mkdir -p /usr/local/include/crun
		sudo cp ./config.h /usr/local/include/crun
		sudo cp ./src/libcrun/container.h /usr/local/include/crun
		sudo cp ./src/libcrun/error.h /usr/local/include/crun
		sudo cp ./src/libcrun/status.h /usr/local/include/crun
		
		sudo mkdir -p /usr/local/include/crun/libocispec
		sudo cp ./libocispec/src/*.h /usr/local/include/crun/libocispec
		
		sudo mkdir -p /usr/local/lib
		sudo cp ./libocispec/.libs/libocispec.* /usr/local/lib
		
		# Refreshes linker to make sure the new crun and libocispec headers can be found
		sudo ldconfig
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet libnl  # ASCII banner
                if [ ! -d ~/libnl ]; then
                  git clone --depth 1 --branch libnl3_5_0 https://github.com/thom311/libnl.git ~/libnl
                fi
                cd ~/libnl
                git pull
		./autogen.sh
		./configure --prefix=/usr --sysconfdir=/etc --disable-static
		sudo make install -j$(nproc)
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet DOBBY  # ASCII banner
		# Build Dobby
                if [ ! -d ~/Dobby ]; then
                  git clone --depth 1 https://github.com/rdkcentral/Dobby.git ~/Dobby
                fi
		cd ~/Dobby
                git pull
		mkdir -p build
		cd build
		cmake -DCMAKE_BUILD_TYPE=Debug -DRDK_PLATFORM=DEV_VM -DCMAKE_INSTALL_PREFIX:PATH=/usr ../
		make -j$(nproc)
		sudo make install
		# Link for the DobbyInit tool
		sudo ln -f -s /usr/local/libexec/ /usr/libexec
		sudo ln -f -s /lib/x86_64-linux-gnu/libreadline.so.* /lib/
	SHELL


	config.vm.provision "shell", inline: <<-SHELL
		figlet DBUS  # ASCII banner
		# FIXME - This is not secure - only for debugging
		if [ ! -e "/etc/dbus-1/system.d/org.rdk.dobby.conf" ]; then
		echo '
		<!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-Bus Bus Configuration 1.0//EN"
		"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
		<busconfig>
		<policy context="default">
		<!-- Allow everything to be sent -->
		<allow send_destination="*" eavesdrop="true"/>
		<!-- Allow everything to be received -->
		<allow eavesdrop="true"/>
		<!-- Allow anyone to own anything -->
		<allow own="*"/>
		<!-- XXX: Allow all users to connect -->
		<allow user="*"/>
		</policy>
		</busconfig>
		' > "/etc/dbus-1/system.d/org.rdk.dobby.conf"
		fi
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet RBUS  # ASCII banner
                if [ ! -d ~/rbus ]; then 
                  git clone https://github.com/rdkcentral/rbus.git ~/rbus
                fi
                cd ~/rbus
                git pull
                git checkout 6ad750d92d0999e02aa0463350405f56101960f1
                cmake . -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_FOR_DESKTOP=ON -DCMAKE_BUILD_TYPE=Debug
		make -j$(nproc)
		sudo make install -j$(nproc)
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet DSM-RBUS  # ASCII banner
		# Build Dsm
		if [ ! -d ~/srcDsm/DSM ]; then
			mkdir -p ~/srcDsm
			git clone --depth 1 git@github.com:rdkcentral/DSM.git ~/srcDsm/DSM
		fi
		cd ~/srcDsm/DSM
		if [ -d ".git" ]; then
			git pull
		fi
		mkdir -p build
		cd build
		cmake ~/srcDsm/DSM -D ENABLE_RBUS_PROVIDER=ON
		make -j$(nproc)
		echo "Make Install"
		sudo make install
		# TODO for now use the file in srcDsm.
		# could have a custom one in our vagrant repo that sets up nicely for the VM
		# config.vm.provision "file", source: ".dsm-config", destination: ".dsm-config"
		# to go inside the Vagrant.configure("2") do |config| section above

		mkdir -p /home/vagrant/destination
		mkdir -p /home/vagrant/repo
		cp /home/vagrant/srcDsm/DSM/src/dsm.config /home/vagrant/dsm.config

		echo 'export DSM_CONFIG_FILE=/home/vagrant/dsm.config' >> /home/vagrant/.bash_profile
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet meta-rdk-setup  # ASCII banner
		# Get and setup meta-rdk
                if [ ! -d ~/meta-rdk ]; then
                  git clone https://code.rdkcentral.com/r/rdk/components/generic/rdk-oe/meta-rdk -b rdkb-2023q2-dunfell
                fi
                cd ~/meta-rdk
		git fetch https://code.rdkcentral.com/r/rdk/components/generic/rdk-oe/meta-rdk refs/changes/51/81951/1 && git checkout FETCH_HEAD
	SHELL

        config.vm.provision "shell", name: "USP-Setup",  privileged: false, inline: <<-SHELL
                figlet USP-setup  # ASCII banner
                # Get and setup USP
                mkdir -p ~/srcUsp
                cd ~/srcUsp
                DIR=~/srcUsp/obuspa
                if [ ! -d ~/srcUsp/obuspa ]; then
                  git clone -b v7.0.0-master --depth 1 git@github.com:BroadbandForum/obuspa.git ~/srcUsp/obuspa
                fi 
                cd obuspa
                git pull
        SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet USP-dac  # ASCII banner
		cd ~/srcUsp/obuspa
		patch -p1 -N < /home/vagrant/patches/obuspa/vendor.c.patch
		patch -p1 -N < /home/vagrant/patches/obuspa/vendor.am.patch
                cd ~/meta-rdk
                patch -p1 -N < /home/vagrant/patches/lcm_rbus.patch
		cp /home/vagrant/meta-rdk/recipes-containers/dsm/files/lcm_rbus_datamodel.c ~/srcUsp/obuspa/src/vendor/lcm_rbus_datamodel.c
	SHELL


	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet USP  # ASCII banner
		cd ~/srcUsp/obuspa
		autoreconf --force --install
		./configure
		make
		sudo make install
	SHELL

	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet "Service files"  # ASCII banner
                sudo cp ~/Dobby/daemon/process/dobby.service  /etc/systemd/system/
                sudo cp ~/rbus/conf/rbus.service              /etc/systemd/system/
                sudo cp ~/extra_files/dsm.service             /etc/systemd/system/
	SHELL

	config.vm.provision "shell", privileged: false, inline: <<-SHELL
		figlet DONE
		echo "**************************************************************************"
		echo "***                     Vagrant provision complete!                    ***"
		echo "***               Run 'vagrant ssh' to SSH to your new VM              ***"
		echo "**************************************************************************"
	SHELL

 
end
